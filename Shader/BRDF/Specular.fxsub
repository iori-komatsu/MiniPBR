#ifndef SHADER_BRDF_SPECULAR_INCLUDED
#define SHADER_BRDF_SPECULAR_INCLUDED

// 参考文献
//
// * Brian Karis; Epic Games.
//   "Real Shading in Unreal Engine 4".
//   SIGGRAPH 2013 Course: Physically Based Shading in Theory and Practice.
//   https://de45xmedrsdbp.cloudfront.net/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
//
// * Romain Guy; Mathias Agopian.
//   "Physically Based Rendering in Filament".
//   https://google.github.io/filament/Filament.md.html

#include <Shader/Math.fxsub>

float3 SpecularD(float dotNH, float roughness) {
    // GGX
    float denom = 1.0 - pow2(dotNH) + pow2(dotNH * roughness);
    return INV_PI * pow2(roughness / denom);
}

float3 SpecularV(float dotNL, float dotNV, float roughness) {
    // Height-correlated Smith function
    float r2 = pow2(roughness);
    float gv = dotNL * sqrt(pow2(dotNV) * (1.0 - r2) + r2);
    float gl = dotNV * sqrt(pow2(dotNL) * (1.0 - r2) + r2);
    return 0.5 / (gv + gl);
}

float3 SpecularF(float dotVH, float3 f0) {
    // Schlick の近似式
    return f0 + (1.0 - f0) * pow5(1.0 - saturate(dotVH));
}

// Cook-Torrance のスペキュラBRDF
// dotNL > 0, dotNV > 0, dotNH > 0 を仮定する
float3 SpecularBRDF(
    float dotNL,
    float dotNV,
    float dotNH,
    float dotVH,
    float perceptualRoughness,
    float3 f0
) {
    float roughness = pow2(perceptualRoughness);
    return SpecularD(dotNH, roughness)
         * SpecularV(dotNL, dotNV, roughness)
         * SpecularF(dotVH, f0);
}

#endif
