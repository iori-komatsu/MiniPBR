#ifndef MATERIAL_BASE_INCLUDED
#define MATERIAL_BASE_INCLUDED

#include <Shader/Common.fxsub>
#include <shader/Math.fxsub>
#include <Shader/ColorSpace.fxsub>
#include <Shader/Parameter/Geometry.fxsub>
#include <Shader/Parameter/Light.fxsub>
#include <Shader/Parameter/Material.fxsub>

// LightColor に対する AmbientColor の大きさ
static const float AmbientCoeff = 0.2;

static float3 LightIrradiance = PI * LightColor;
static float3 AmbientIrradiance = LightIrradiance * AmbientCoeff;

bool     parthf;   // パースペクティブフラグ
bool     transp;   // 半透明フラグ
#define  SKII1    1500
#define  SKII2    8000

#define MAX_ANISOTROPY 16

// オブジェクトのテクスチャ
texture ObjectTexture: MATERIALTEXTURE;
sampler ObjectTextureSampler = sampler_state {
    Texture = <ObjectTexture>;
    MinFilter = ANISOTROPIC;
    MagFilter = ANISOTROPIC;
    MipFilter = ANISOTROPIC;
    MaxAnisotropy = MAX_ANISOTROPY;
    AddressU  = WRAP;
    AddressV  = WRAP;
};

#ifdef USE_NORMAL_MAP

texture2D NormalMap <
    string ResourceName = NORMAL_MAP_PATH;
>;
sampler2D NormalSamp = sampler_state {
    Texture = <NormalMap>;
    MinFilter = ANISOTROPIC;
    MagFilter = ANISOTROPIC;
    MipFilter = ANISOTROPIC;
    MaxAnisotropy = MAX_ANISOTROPY;
    AddressU = WRAP;
    AddressV = WRAP;
};

#endif

//---------------------------------------------------------------------------------------------

// 頂点シェーダ
void MainVS(
    in float4 pos : POSITION,
    in float3 normal : NORMAL,
    in float2 texCoord : TEXCOORD0,
    in uniform bool useTexture,
    in uniform bool selfShadow,
    out float4 oPos : POSITION,
    out float3 oWorldPos : TEXCOORD0,
    out float2 oTexCoord : TEXCOORD1,
    out float3 oNormal : TEXCOORD2,
    out float3 oViewDir : TEXCOORD3
) {
    // カメラ視点のワールドビュー射影変換
    oPos = mul(pos, WorldViewProjMatrix);

    // ワールド座標
    oWorldPos = mul(pos, WorldMatrix).xyz;

    // カメラとの相対位置
    oViewDir = CameraPos - mul(pos, WorldMatrix).rgb;
    // 頂点法線
    oNormal = normalize(mul(normal, (float3x3)WorldMatrix));

    // テクスチャ座標
    oTexCoord = texCoord;
}

float3 ShaderSurface(
    float3 worldPos,
    float3 baseColor,
    float3 normal,
    float3 viewDir,
    float3 lightDir,
    float3 lightIrradiance,
    uniform bool selfShadow
);

float4 BaseColor(float2 tex, uniform bool useTexture) {
    float4 baseColor = saturate(float4(MaterialAmbient + MaterialEmmisive, MaterialDiffuse.a));
    if (useTexture) {
        float4 texColor = tex2D(ObjectTextureSampler, tex);
        // テクスチャ材質モーフ
        texColor.rgb = lerp(
            1,
            texColor.rgb * TextureMulValue.rgb + TextureAddValue.rgb,
            TextureMulValue.a + TextureAddValue.a);
        baseColor *= texColor;
    }
    return float4(sRGB2Linear(baseColor.rgb), baseColor.a);
}

#ifdef USE_NORMAL_MAP

    float3 TangentNormalToWorldNormal(float3 tangentNormal, float3 worldNormal, float3 worldPos, float2 tex) {
        float3 p1 = ddx(worldPos);
        float3 p2 = ddy(worldPos);
        float2 t1 = ddx(tex);
        float2 t2 = ddy(tex);

        float3 worldU = normalize(t2.y * p1 - t1.y * p2);
        float3 worldV = normalize(t1.x * p2 - t2.x * p1);

        float3 tangent  = normalize(worldU - dot(worldU, worldNormal) * worldNormal);
        float3 binormal = normalize(worldV - dot(worldV, worldNormal) * worldNormal);

        return normalize(
            tangentNormal.x * tangent + tangentNormal.y * binormal + tangentNormal.z * worldNormal
        );
    }

    float3 GetNormal(float3 worldPos, float2 tex, float3 worldNormal) {
        float2 normalTex = tex * NormalMapRepeat;
        float3 tangentNormal = normalize(Remap01To11(tex2D(NormalSamp, normalTex).rgb));
        return TangentNormalToWorldNormal(tangentNormal, worldNormal, worldPos, normalTex);
    }

#else

    inline float3 GetNormal(float3 worldPos, float2 tex, float3 worldNormal) {
        return worldNormal;
    }

#endif

// ピクセルシェーダ
float4 MainPS(
    float3 worldPos : TEXCOORD0,
    float2 tex : TEXCOORD1,
    float3 normal : TEXCOORD2,
    float3 viewDir : TEXCOORD3,
    uniform bool useTexture,
    uniform bool selfShadow
) : COLOR0 {
    float4 baseColor = BaseColor(tex, useTexture);
    float3 outColor = ShaderSurface(
        worldPos,
        baseColor.rgb,
        GetNormal(worldPos, tex, normalize(normal)),
        normalize(viewDir),
        -LightDir,
        LightIrradiance,
        selfShadow
    );
    return float4(outColor, baseColor.a);
}

//---------------------------------------------------------------------------------------------

#define MAIN_TEC(name, mmdpass, usetexture, selfshadow) \
    technique name < string MMDPass = mmdpass; bool UseTexture = usetexture; > { \
        pass DrawObject { \
            VertexShader = compile vs_3_0 MainVS(usetexture, selfshadow); \
            PixelShader  = compile ps_3_0 MainPS(usetexture, selfshadow); \
        } \
    }

MAIN_TEC(MainTec0, "object", false, false)
MAIN_TEC(MainTec1, "object", true, false)
MAIN_TEC(MainTecBS0, "object_ss", false, true)
MAIN_TEC(MainTecBS1, "object_ss", true, true)

#define EMPTY_TEC(name, mmdpass) technique name<string MMDPass = mmdpass;> {}

EMPTY_TEC(ShadowTec, "shadow")

#endif
